@{
    var grid = (WebGrid)ViewBag.Grid;
    var authors = ViewBag.Authors;
    var categories = ViewBag.Categories;
    var columnSet = ViewBag.ColumnSet;
}


        <link rel="stylesheet" href="~/Styles/StyleSheet.css" type="text/css" />

        <script>
            $(function () {
                $('.edit-mode').hide();
                initializeFormEvents();
                initializeGridItemEvents();
            });

            function initializeFormEvents() {
                $('#add').on('click', function () {addItem($(this));});
            }
            
            // New way of doing .live in jQuery 1.9.1
            function initializeGridItemEvents() {
                $(document).on('click', '.edit-item', function () { editItem($(this)); });
                $(document).on('click', '.save-item', function () { saveItem($(this)); });
                $(document).on('click', '.delete-item', function () { deleteItem($(this)); });
                $(document).on('click', '.save-new-item', function () {
                    $('.save-new-item').removeClass("save-new-item").addClass("save-item");
                    saveItem($(this));
                });
            };

            function setArrows() {
                var dir = $('#dir').val();
                var col = $('#col').val();
                var header = $('th a[href*=' + col + ']');

                if (dir == 'Ascending') {
                    header.text(header.text() + ' ▲');
                }

                if (dir == 'Descending') {
                    header.text(header.text() + ' ▼');
                }

                $('.edit-mode').hide();
                $('.display-mode').show();
            };

            function addItem(element) {
                // Disable add button.  Add cannot be re-enabled until we get the ID of the new row back from the server.
                element.attr("disabled", true).addClass("disabled");

                // Add a row.
                var newTableRow = $('table').append('<tr>' +
                        '<td class="col1"><button class="delete-item display-mode" id="-1">Delete</button> <button class="edit-item display-mode" id="-1">Edit</button> <button class="save-new-item edit-mode" id="-1">Save</button>' +
                        '<td class="col2"><span id="title" class="display-mode"/> <input name="Title" id="Title" class="edit-mode"/></td>' +
                        '<td class="col3"><span id="authorname" class="display-mode"/> <select name="AuthorId" id="AuthorId" class="edit-mode"></select></td>' +
                        '<td class="col4"><span id="category" class="display-mode"/> <select name="CategoryId" id="CategoryId" class="edit-mode"></select></td>' +
                        '<td class="col5"><span id="isbn" class="display-mode"/> <input name="ISBN" id="ISBN" class="edit-mode"/></td>' +
                        '<td class="col6"><input id="hardback-display" class="display-mode" type="checkbox" name="hardback-display"/> <input name="HardBack" id="Hardback" type="checkbox" class="edit-mode"/></td>');

                var newRow = newTableRow.find("#-1").parents('tr:first');
                // Hide the display mode fields and show the edit mode fields.
                newRow.find('.edit-mode').show();
                newRow.find('.display-mode').hide();

                // Create the first "select author/category" entry.
                // $('#NewAuthorId').append($('<option/>').attr('value', '').text('-- Select Author --'));
                var authorList = newRow.find("#AuthorId");
                var categoryList = newRow.find("#CategoryId");
                authorList.append($('<option/>').attr('value', '').text('-- Select Author --'));
                categoryList.append($('<option/>').attr('value', '').text('-- Select Category --'));

                // Get the list of authors and populate the select box.
                $.getJSON('/ViewBook/GetAuthors', function (authors) {
                    $.each($.parseJSON(authors), function (index, author) {
                        authorList.append($('<option/>').attr('value', author.AuthorId).text(author.Author));
                    });
                });

                // Get the list of categories and populate the select box.
                $.getJSON('/ViewBook/GetCategories', function (categories) {
                    $.each($.parseJSON(categories), function (index, category) {
                        categoryList.append($('<option/>').attr('value', category.CategoryId).text(category.Category));
                    });
                });
            }

            function editItem(element) {
                var tr = element.parents('tr:first');
                tr.find('.edit-mode, .display-mode').toggle();
            };

            function saveItem(element) {
                var tr = element.parents('tr:first');
                var bookId = element.prop('id');
                var title = tr.find('#Title').val();
                var authorId = tr.find('#AuthorId').val();
                var categoryId = tr.find('#CategoryId').val();
                var authorName = tr.find("#AuthorId option:selected").text();
                var categoryName = tr.find("#CategoryId option:selected").text();
                var isbn = tr.find('#ISBN').val();
                var hardback = tr.find('#Hardback').attr('checked') ? true : false;

                // Update the display mode line:
                tr.find('#title').text(title);
                tr.find('#authorname').text(authorName);
                tr.find('#category').text(categoryName);
                tr.find('#isbn').text(isbn);
                tr.find('#hardback-display').removeAttr("disabled").attr('checked', hardback).attr('disabled', true);

                // Post the data so the server saves it.
                $.post(
                    '/ViewBook/SaveChanges',
                    { BookId: bookId, Title: title, AuthorId: authorId, CategoryId: categoryId, ISBN: isbn, Hardback: hardback },
                    function (bookID) {
                        var newBookID = bookID.BookId;
                        tr.find('#-1').attr("id", newBookID);
                        $('#add').attr("disabled", false).removeClass("disabled");
                    });

                // Revert to display mode.
                tr.find('.edit-mode, .display-mode').toggle();
            };

            function deleteItem(element) {
                var flag = confirm('Are you sure you want to delete this record?');

                if (flag) {
                    var tr = element.parents('tr:first');
                    tr.fadeOut(400, function () { tr.remove(); });
                    var bookId = element.prop('id');
                    $.post('/ViewBook/DeleteBook', { BookId: bookId });
                }
            };
        </script>
        <div id="grid">
            @grid.GetHtml(
                tableStyle : "table",
                alternatingRowStyle : "alternate",
                selectedRowStyle: "selected",
                headerStyle : "header",
                columns: @columnSet)
        
            @Html.Hidden("dir", grid.SortDirection) 
            @Html.Hidden("col", grid.SortColumn)
        </div>
        
        <button id="add">Add</button>

