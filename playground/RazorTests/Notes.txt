FTP: dpworkso@ftp.w18.wh-2.com



My generic grid URL: ViewBook\GenericGrid


An example form post button:

@using (Html.BeginForm("Index", "Home"))
{
    <input type="submit" value="Login2" />
}

The resulting HTML is simple enough:

<form action="/" method="post">    
  <input type="submit" value="Login2" />
</form>

Note that action is "/" because the page is "Home/Index" which is equivalent to "/", so we have in the controller:

		[HttpPost]
		[AllowAnonymous]
		public ActionResult Index(object p1)

but I have no idea what the params should be.

BTW, we should probably add back in:

[ValidateAntiForgeryToken]

and in the cshtml:

@Html.AntiForgeryToken()

Now, how does the blimey model work???

		
Session timeout:

The default session timeout does not seem to be 20 minutes as previously documented on the web.  It seems very short indeed.  To change this:

<sessionState mode="InProc" customProvider="DefaultSessionProvider" timeout="10">

where timeout is in minutes.  Still, that doesn't seem to work quite right, possibly a development issue when running the site from VS?

How to capture when the session times out?
See action filters: http://www.asp.net/mvc/overview/older-versions-1/controllers-and-routing/understanding-action-filters-cs

Also, the above is a good example of logging.

Migrations:

In the Package Manager Console:

enable-migrations
add-migration InitialCreate
update-database

RazorEngine:

If you install RazorEngine, it f***s up your app.
https://razorengine.codeplex.com/workitem/1110
You have to remove the reference to the "System.web.Razor" under the assembly bindings in your web.config 

Email using a view:

http://stackoverflow.com/questions/4368815/razor-views-as-email-templates
Might consider MvcMailer as well.

-------------- ARGH! ------------------

E:\dpworks\playground\packages\Microsoft.AspNet.Razor.3.0.0\lib\net45\System.Web.Razor.dll

E:\dpworks\playground\packages\Microsoft.AspNet.Mvc.4.0.40804.0\lib\net40\System.Web.Mvc.dll

http://stackoverflow.com/questions/5628689/download-old-version-of-package-with-nuget

uninstall-package razorengine


http://stackoverflow.com/questions/25514718/found-conflicts-between-versions-of-the-same-dependent-assembly
http://stackoverflow.com/questions/14864670/mvc4-azure-publishing-error-could-not-load-file-or-assembly-system-web-razor
http://docs.nuget.org/docs/start-here/using-the-package-manager-console
http://anthonyfassett.blogspot.com/2013/11/updating-razor-20-to-30-with-aspnet-mvc.html


Web mail on the host requires:
<configuration>
  <system.web>
    <trust level="Full" originUrl=""/>


Lessons:

Don't use install-package
Make sure all your references are "Copy Local -> true"
Don't use the deployer
Don't use migrations on the server -- use migrations locally and then hand pick what SQL to execute on the server
Configure the trust level, otherwise email doesn't work.

-------------------------------------------
Razor Generator:

http://razorgenerator.codeplex.com/
http://stackoverflow.com/questions/10608948/visual-studio-cannot-find-custom-tool-razorgenerator

install-package RazorGenerator.MVC

you will also need to install the Visual Studio Extension called RazorGenerator

    Go to Tools, then Extension Manager
    Search for Razor Generator
    Click the Download button.
    Once the install has completed, restart Visual Studio.

After restart, in the PM console:

Enable-RazorGenerator

For new views: Go to an MVC Razor view's property and set the Custom tool to RazorGenerator 

To generate the actual cs files: in the PM - Redo-RazorGenerator

Alternatively, right-click on the .cshtml view and select "Run Custom Tool"

Note that a couple views needed manual fixups -- missing "using" -- so we don't want to globally change this everywhere.
-------------------------------------------


fieldNamePrefix


-------------------------------------------

INSTALLING ON ANOTHER SYSTEM

***** STEP 1 *****

git clone ...

Install nuget 2.7 if not already installed, so that auto-download of missing packages will happen: http://nuget.codeplex.com/releases/view/133091
(Make sure that under tools -> Package Manager -> Package Manager Settings, "Allow Nuget to download missing packages" and "Automatically check for..." are checked.
Reload the solution and build it to download the missing packages.

ALSO:

download nuget.exe if you don't have it already: http://nuget.codeplex.com/releases/view/133091

nuget install packages.config
 - or -
nuget restore YourSolution.sln

***** STEP 2 *****

Create the following tables in the dbworks DB on the new system:

UserProfile
webpags_Membership
webpages_OAuthMembership
webpages_Roles
webpages_UsersInRoles

CREATE TABLE [dbo].[UserProfile](
	[UserId] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [nvarchar](56) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[UserName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

CREATE TABLE [dbo].[webpages_Roles](
	[RoleId] [int] IDENTITY(1,1) NOT NULL,
	[RoleName] [nvarchar](256) NULL,
 CONSTRAINT [PK_dbo.webpages_Roles] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

CREATE TABLE [dbo].[webpages_UsersInRoles](
	[UserId] [int] NOT NULL,
	[RoleId] [int] NOT NULL,
 CONSTRAINT [PK_dbo.webpages_UsersInRoles] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[webpages_UsersInRoles]  WITH CHECK ADD  CONSTRAINT [FK_dbo.webpages_UsersInRoles_dbo.UserProfile_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[UserProfile] ([UserId])
GO

ALTER TABLE [dbo].[webpages_UsersInRoles] CHECK CONSTRAINT [FK_dbo.webpages_UsersInRoles_dbo.UserProfile_UserId]
GO

ALTER TABLE [dbo].[webpages_UsersInRoles]  WITH CHECK ADD  CONSTRAINT [FK_dbo.webpages_UsersInRoles_dbo.webpages_Roles_RoleId] FOREIGN KEY([RoleId])
REFERENCES [dbo].[webpages_Roles] ([RoleId])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[webpages_UsersInRoles] CHECK CONSTRAINT [FK_dbo.webpages_UsersInRoles_dbo.webpages_Roles_RoleId]
GO

CREATE TABLE [dbo].[webpages_Membership](
	[UserId] [int] NOT NULL,
	[CreateDate] [datetime] NULL,
	[ConfirmationToken] [nvarchar](128) NULL,
	[IsConfirmed] [bit] NULL,
	[LastPasswordFailureDate] [datetime] NULL,
	[PasswordFailuresSinceLastSuccess] [int] NOT NULL,
	[Password] [nvarchar](128) NOT NULL,
	[PasswordChangedDate] [datetime] NULL,
	[PasswordSalt] [nvarchar](128) NOT NULL,
	[PasswordVerificationToken] [nvarchar](128) NULL,
	[PasswordVerificationTokenExpirationDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[webpages_Membership] ADD  DEFAULT ((0)) FOR [IsConfirmed]
GO

ALTER TABLE [dbo].[webpages_Membership] ADD  DEFAULT ((0)) FOR [PasswordFailuresSinceLastSuccess]
GO

CREATE TABLE [dbo].[webpages_OAuthMembership](
	[Provider] [nvarchar](30) NOT NULL,
	[ProviderUserId] [nvarchar](100) NOT NULL,
	[UserId] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Provider] ASC,
	[ProviderUserId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

***** STEP 3 *****

Update the web.config to connect to your database

***** STEP 4 *****

In the package manager console:
update-database

***** STEP 5 *****

In the solution properties page, Web, change "Servers" to "Use Visual Studio Development Server" as I've encountered problems with "Use Local IIS Web server" working after rebuilds.

***** STEP 6 *****

In the AccountController.cs, change the settings so that registration allows anonymous:

// [AllowAnonymous]
		[Authorize]
		public ActionResult Register()
		{
			return View();
		}

Go to the "hidden" page /Account/Register

Register yourself as a user to seed to DB with an initial user:
enter an email address for "username"

***** STEP 7 *****

In AdminController.cs, allow anonymous for changing roles, as we need to get you set up as a site-wide admin

		[AllowAnonymous]
		// [Authorize]
		public ActionResult RoleManagement()

***** STEP 7 *****

Go to: /Admin/RoleManagement

Create the role "Site-Wide Administrator"  (must match exactly [I think!])

Add yourself to the role.

You can now add sites and additional roles.

***** STEP 8 *****

Change the functions above back to "Authorize"


																







