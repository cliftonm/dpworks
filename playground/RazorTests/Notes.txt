FTP: dpworkso@ftp.w18.wh-2.com



My generic grid URL: ViewBook\GenericGrid


An example form post button:

@using (Html.BeginForm("Index", "Home"))
{
    <input type="submit" value="Login2" />
}

The resulting HTML is simple enough:

<form action="/" method="post">    
  <input type="submit" value="Login2" />
</form>

Note that action is "/" because the page is "Home/Index" which is equivalent to "/", so we have in the controller:

		[HttpPost]
		[AllowAnonymous]
		public ActionResult Index(object p1)

but I have no idea what the params should be.

BTW, we should probably add back in:

[ValidateAntiForgeryToken]

and in the cshtml:

@Html.AntiForgeryToken()

Now, how does the blimey model work???

		
Session timeout:

The default session timeout does not seem to be 20 minutes as previously documented on the web.  It seems very short indeed.  To change this:

<sessionState mode="InProc" customProvider="DefaultSessionProvider" timeout="10">

where timeout is in minutes.  Still, that doesn't seem to work quite right, possibly a development issue when running the site from VS?

How to capture when the session times out?
See action filters: http://www.asp.net/mvc/overview/older-versions-1/controllers-and-routing/understanding-action-filters-cs

Also, the above is a good example of logging.

Migrations:

In the Package Manager Console:

enable-migrations
add-migration InitialCreate
update-database

RazorEngine:

If you install RazorEngine, it f***s up your app.
https://razorengine.codeplex.com/workitem/1110
You have to remove the reference to the "System.web.Razor" under the assembly bindings in your web.config 

Email using a view:

http://stackoverflow.com/questions/4368815/razor-views-as-email-templates
Might consider MvcMailer as well.

-------------- ARGH! ------------------

E:\dpworks\playground\packages\Microsoft.AspNet.Razor.3.0.0\lib\net45\System.Web.Razor.dll

E:\dpworks\playground\packages\Microsoft.AspNet.Mvc.4.0.40804.0\lib\net40\System.Web.Mvc.dll

http://stackoverflow.com/questions/5628689/download-old-version-of-package-with-nuget

uninstall-package razorengine


http://stackoverflow.com/questions/25514718/found-conflicts-between-versions-of-the-same-dependent-assembly
http://stackoverflow.com/questions/14864670/mvc4-azure-publishing-error-could-not-load-file-or-assembly-system-web-razor
http://docs.nuget.org/docs/start-here/using-the-package-manager-console
http://anthonyfassett.blogspot.com/2013/11/updating-razor-20-to-30-with-aspnet-mvc.html


Web mail on the host requires:
<configuration>
  <system.web>
    <trust level="Full" originUrl=""/>


Lessons:

Don't use install-package
Make sure all your references are "Copy Local -> true"
Don't use the deployer
Don't use migrations on the server -- use migrations locally and then hand pick what SQL to execute on the server
Configure the trust level, otherwise email doesn't work.

-------------------------------------------
Razor Generator:

http://razorgenerator.codeplex.com/
http://stackoverflow.com/questions/10608948/visual-studio-cannot-find-custom-tool-razorgenerator

install-package RazorGenerator.MVC

you will also need to install the Visual Studio Extension called RazorGenerator

    Go to Tools, then Extension Manager
    Search for Razor Generator
    Click the Download button.
    Once the install has completed, restart Visual Studio.

After restart, in the PM console:

Enable-RazorGenerator

For new views: Go to an MVC Razor view's property and set the Custom tool to RazorGenerator 

To generate the actual cs files: in the PM - Redo-RazorGenerator

Alternatively, right-click on the .cshtml view and select "Run Custom Tool"

Note that a couple views needed manual fixups -- missing "using" -- so we don't want to globally change this everywhere.
-------------------------------------------
